model Account {
  id                String  @id @unique @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @unique @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String          @id @unique @default(cuid())
  name           String?
  company        String?
  raisonSocial   String?
  email          String?         @unique
  emailVerified  DateTime?
  phone          String?
  image          String?
  notes          String?
  completed      Boolean         @default(true)
  role           Role            @default(user)
  orders         Order[]
  amapOrders     AMAPOrder[]
  invoices       Invoice[]
  accounts       Account[]
  sessions       Session[]
  address        Address?
  billingAddress BillingAddress?
  shop           Shop?
  messages       Contact[]
  comments       Comment[]
  notifications  Notification?
  defaultOrders  DefaultOrder[]
  dayOrderUsers  DayOrderUser[]
  ccInvoice      String[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum Role {
  user
  admin
  pro
  shipping
  trackOnlyUser
  readOnlyAdmin
  deleted
}

model VerificationToken {
  identifier String
  token      String   @unique
  otp        String?
  url        String?
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id                Int     @id @unique @default(autoincrement())
  sendShippingEmail Boolean @default(true)
  sendInvoiceEmail  Boolean @default(true)
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Address {
  id         String   @id @unique @default(cuid())
  label      String?
  line1      String?
  line2      String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  latitude   Float?
  longitude  Float?
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

model BillingAddress {
  id         String   @id @unique @default(cuid())
  label      String?
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String
  latitude   Float?
  longitude  Float?
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

model DefaultOrder {
  id                   Int                   @id @unique @default(autoincrement())
  day                  Int
  confirmed            Boolean               @default(true)
  defaultOrderProducts DefaultOrderProduct[]
  userId               String
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  shopId               String?
  defaultShop          Shop?                 @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([userId, day])
  @@index([userId])
  @@index([shopId])
}

model DefaultOrderProduct {
  id             Int          @id @unique @default(autoincrement())
  defaultOrderId Int
  defaultOrder   DefaultOrder @relation(fields: [defaultOrderId], references: [id], onDelete: Cascade)
  productId      String
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity       Float
  price          Float

  @@index([productId])
  @@index([defaultOrderId])
}
