generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  relationMode = "prisma"
}


model Account {
  id                 String @unique  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @unique @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String    @unique @id @default(cuid())
  name             String?
  company          String?
  email            String?   @unique
  emailVerified    DateTime?
  phone            String? 
  image            String?
  role             Role @default(user)
  orders           Order[]
  accounts         Account[]
  sessions         Session[]
  address          Address[]
  messages         Contact[]
  comments         Comment[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt 
}

enum Role {
  user
  admin
  pro
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



model Category {
  id          String @unique @id @default(uuid())
  name        String @unique
  description String?
   imageUrl   String
  products    MainProduct[] @relation("CategoryToProduct")
  createdAt   DateTime @default(now())
  updatedAd   DateTime @updatedAt

}

model MainProduct {
 id           String @unique @id @default(cuid())
 name        String @unique
  categoryName String
  category     Category @relation("CategoryToProduct", fields: [categoryName], references: [name])
productSpecs String @db.Text
 imagesUrl    String[]
 products      Product[] @relation("MainProductToProduct")
  isArchived   Boolean @default(false)
  isPro        Boolean @default(false)
   createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([categoryName])

}

model Product {
  id           String @unique @id @default(cuid())
  productName String
  product     MainProduct @relation("MainProductToProduct", fields: [productName], references: [name],onDelete: Cascade)
  name         String 
  description  String @db.VarChar(1000)
  price        Float 
  isFeatured   Boolean @default(false)
  isArchived   Boolean @default(false)
  imagesUrl    String[]
  options       Option[] @relation("ProductToOption")

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  

  @@index([productName])
}


model Option {
  id             String   @unique @id @default(cuid())
  name           String
  value          String
  productId      String   
  product        Product  @relation("ProductToOption", fields: [productId], references: [id], onDelete: Cascade)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([productId])
  }

 

model Order {
  id         String @unique @id @default(uuid())
  orderItems OrderItem[]
  totalPrice Float @default(1)
  name       String @default("")
  pdfUrl     String @default("")
  isPaid     Boolean @default(false)
  userId     String  
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  shopId    String 
  shop       Shop @relation(fields: [shopId], references: [id])
  datePickUp DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
   @@index([shopId])

}

model OrderItem {
  id        String @unique @id @default(uuid())
  price     Float
  quantity  Float @default(1)
  name      String
  categoryName String
  description  String @db.VarChar(1000)
  orderId   String
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Contact {
  id        String   @unique @id @default(uuid())
  name      String
  email      String
  phone     String? 
  subject   String
  message   String   @db.VarChar(1000) 
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  userId    String? 
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@index([userId])

}

model Address {
  id         String  @unique @id @default(uuid())
  label      String?
  line1      String?
  line2      String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  userId     String   
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 


  @@index([userId])

}

model Shop {
  id String @unique @id @default(uuid())
  name String
  lat Float 
  long Float
  address String
  phone String
  email String
  description String
  imageUrl String?
  website String?
  order      Order[] 
  isArchived Boolean  @default(false)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

   }

model Comment {
   id        String    @unique @id @default(cuid())
   name      String
   company   String?
   note      Int
   message   String    @db.VarChar(1000) 
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now()) 
  updatedAt  DateTime @updatedAt 

  userId     String? 
  user       User?     @relation(fields: [userId], references: [id])

   @@index([userId])
}
